@code {
    [Inject]
    IDeviceService _deviceService { get; set; }
    private bool isDataLoaded = false;
    public List<TcpDatasViewModel> SnmpOidDatas = new List<TcpDatasViewModel>();

    public async Task OnInitGetOidDataAsync()
    {
        SnmpOidDatas = await _deviceService.GetTcpDatas();
        isDataLoaded = true; // Veriler yüklendi
        StateHasChanged(); // Komponentin yeniden render edilmesini tetikle
        Console.WriteLine("Veriler yüklendi...");
    }
}
@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeFlowbite");
            await OnInitGetOidDataAsync();
        }
        if (firstRender && isDataLoaded)
        {
            await JSRuntime.InvokeVoidAsync("setupChart", SnmpOidDatas);
            isDataLoaded = false; // setupChart'ın birden fazla çağrılmasını önlemek için
        }
    }
}
<div class="w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">
    <div class="flex justify-between mb-5">
        <div>
            <h5 class="leading-none text-3xl font-bold text-gray-900 dark:text-white pb-2">$12,423</h5>
            <p class="text-base font-normal text-gray-500 dark:text-gray-400">Sales this week</p>
        </div>
        <div class="flex items-center px-2.5 py-0.5 text-base font-semibold text-green-500 dark:text-green-500 text-center">
            23%
            <svg class="w-3 h-3 ms-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 14">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13V1m0 0L1 5m4-4 4 4" />
            </svg>
        </div>
    </div>
    <div id="tooltip-chart"></div>
    <div class="grid grid-cols-1 items-center border-gray-200 border-t dark:border-gray-700 justify-between mt-5">
        <div class="flex justify-between items-center pt-5">
            <!-- Button -->
            <button id="dropdownDefaultButton"
                    data-dropdown-toggle="lastDaysdropdown"
                    data-dropdown-placement="bottom"
                    class="text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-900 text-center inline-flex items-center dark:hover:text-white"
                    type="button">
                Last 7 days
                <svg class="w-2.5 m-2.5 ms-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4" />
                </svg>
            </button>
            <!-- Dropdown menu -->
            <div id="lastDaysdropdown" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">
                <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDefaultButton">
                    <li>
                        <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Yesterday</a>
                    </li>
                    <li>
                        <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Today</a>
                    </li>
                    <li>
                        <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Last 7 days</a>
                    </li>
                    <li>
                        <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Last 30 days</a>
                    </li>
                    <li>
                        <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Last 90 days</a>
                    </li>
                </ul>
            </div>
            <a href="#"
               class="uppercase text-sm font-semibold inline-flex items-center rounded-lg text-blue-600 hover:text-blue-700 dark:hover:text-blue-500  hover:bg-gray-100 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700 px-3 py-2">
                Sales Report
                <svg class="w-2.5 h-2.5 ms-1.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4" />
                </svg>
            </a>
        </div>
    </div>
</div>
<script>
    function setupChart(data) {
        const categories = [];
        const series = [];

        // Veriyi işleyip kategorileri ve serileri hazırlama
        data.forEach(item => {
            item.series.forEach(s => {
                let existingSeries = series.find(series => series.name === s.name);
                if (!existingSeries) {
                    existingSeries = {
                        name: s.name,
                        data: [],
                        color: s.color // Renkleri doğrudan kullan
                    };
                    series.push(existingSeries);
                }
                s.data.forEach(d => {
                    const timestamp = new Date(d.timestamp.$date).toLocaleDateString("en-US");
                    if (!categories.includes(timestamp)) {
                        categories.push(timestamp);
                    }
                    existingSeries.data.push({
                        x: timestamp,
                        y: parseInt(d.value, 10)
                    });
                });
            });
        });
        const options = {
            series: series,
            chart: {
                type: 'area',
                height: 350
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                curve: 'smooth'
            },
            xaxis: {
                type: 'category',
                categories: categories
            },
            tooltip: {
                x: {
                    format: 'dd/MM/yy'
                }
            },
            fill: {
                type: 'gradient',
                gradient: {
                    shadeIntensity: 1,
                    inverseColors: false,
                    opacityFrom: 0.5,
                    opacityTo: 0,
                    stops: [0, 90, 100]
                }
            }
        };

        const chart = new ApexCharts(document.querySelector("#chart"), options);
        chart.render();

        if (document.getElementById("tooltip-chart") && typeof ApexCharts !== 'undefined') {
            const chart = new ApexCharts(document.getElementById("tooltip-chart"), options);
            chart.render();
        }
    }
</script>